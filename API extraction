# API extraction

import os
import json
import pandas as pd

def extract_api_calls_from_json(file_path):
    api_calls = []
    md5 = None
    with open(file_path, 'r', encoding='utf-8') as json_file:
        try:
            data = json.load(json_file)
            # Extract MD5 from the target section
            md5 = data.get('target', {}).get('file', {}).get('md5', None)
            
            if 'behavior' in data and 'processes' in data['behavior']:
                for process in data['behavior']['processes']:
                    if 'calls' in process:
                        for call in process['calls']:
                            api_calls.append(call.get('api'))
        except json.JSONDecodeError as e:
            print(f"Error decoding JSON from file {file_path}: {e}")
        except UnicodeDecodeError as e:
            print(f"Unicode error reading file {file_path}: {e}")
    return md5, api_calls

def process_directory(directory, label):
    report_data = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file == "report.json":
                file_path = os.path.join(root, file)
                md5, api_calls = extract_api_calls_from_json(file_path)
                if md5 and api_calls:
                    report_data.append([md5, label] + api_calls)
    return report_data

def main():
    base_directory = r"C:\Users\SSL\Desktop\Cuckoo"
    malware_dir = os.path.join(base_directory, "Malware")
    benign_dir = os.path.join(base_directory, "Benign")

    malware_data = process_directory(malware_dir, 1)
    benign_data = process_directory(benign_dir, 0)

    report_data = malware_data + benign_data
        
    df = pd.DataFrame(report_data)
    max_columns = df.shape[1]
    column_names = ['md5', 'label'] + [f'api_call_{i+1}' for i in range(max_columns - 2)]
    df.columns = column_names
    
    api_calls_df = df.iloc[:, 2:]

    all_api_calls = api_calls_df.values.flatten()

    all_api_calls = all_api_calls[~pd.isnull(all_api_calls)]

    api_call_counts = pd.Series(all_api_calls).value_counts()

    most_frequent_apis = api_call_counts[api_call_counts > 10].index.tolist()

    final_data = []
    for row in report_data:
        md5 = row[0]
        label = row[1]
        apis = row[2:]
        row_data = [md5, label] + [1 if api in apis else 0 for api in most_frequent_apis]
        final_data.append(row_data)

    final_df = pd.DataFrame(final_data, columns=['md5', 'label'] + most_frequent_apis)
        
    output_file_path = os.path.join(os.path.expanduser("~"), "Documents", "dataset.csv")
if __name__ == "__main__":
    main()
